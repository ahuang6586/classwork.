package caveExplorer;

public class PracticeClass {
	
	public static void main(String[] args){
		String[][] arr2D = new String[10][12];
		for(int row = 0; row < arr2D.length; row++){
			for(int col = 0; col < arr2D[row].length;col++){
				arr2D[row][col] =" ";
			}
			
		}
		arr2D[1][2]= "O";
		arr2D[1][2]="|";
		
		
		for(int col = 0; col < arr2D[0].length; col++){
			arr2D[0][col]="_";
			arr2D[arr2D.length -1][col]="_";
		}
		for(int row = 1; row < arr2D.length; row++){
			arr2D[row][0] ="|";
			arr2D[row][arr2D[0].length-1] ="|";
			
		}	
		for(int row = 1; row < arr2D.length; row++){
			arr2D[row][2] ="|";
			arr2D[row][arr2D[2].length-1] ="|";
			
		}		
		for(int col = 0; col < arr2D[0].length; col++){
			arr2D[2][col]="_";
			arr2D[arr2D.length -1][col]="_";
		}
		
		
//		for(int row = 4; row <arr2D.length-3; row++ ){
//			for(int col = 0; col < arr2D[row].length;col++){
//				arr2D[row][col] =" O ";
//				
//			}
//		}
//		for(int row = 5; row <arr2D.length-4; row++ ){
//			for(int col = 0; col < arr2D[row].length;col++){
//				arr2D[row][col] ="-|-";
//				
//			}
//		}
//		for(int row = 6; row <arr2D.length-5; row++ ){
//			for(int col = 0; col < arr2D[row].length;col++){
//				arr2D[row][col] =" ^ ";
//				
//			}
//		}
//		for(int row = 7; row < arr2D.length; row++){
//			for(int col = 0; col < arr2D[row].length;col++){
//				arr2D[row][col] ="M";
//			}
//			
//		}
		printPic(arr2D);
	}
	
	public static void printPic(String[][] arr2D){
		
		for(int row = 0; row < arr2D.length; row++){
			for(int col = 0; col < arr2D[row].length;col++){
				System.out.print(arr2D[row][col]);
			}
			System.out.println();
		}
	}
			
		
	
}
---------------
package caveExplorer;

public class Door {
	private boolean locked;
	private boolean open;
	private String description;
	private String details;

	public Door(){
		locked = false;
		open = true;
		description = "passage";
		details ="";
	}
	public void setLocked(boolean b){
		locked = b;
	}
	public boolean isOpen() {
		return open;
	}
	public void setOpen(boolean open) {
		this.open = open;
		//field over parameter/local variable 
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public String getDetails() {
		return details;
	}
	public void setDetails(String details) {
		this.details = details;
	}
	public boolean isLocked(){
		return locked;
	}
}
-------------------
package caveExplorer;

public class CaveRoom {

	private String description;
	private String directions;
	private String contents;
	private String defaultContents;

	private CaveRoom[] borderingRooms;
	private Door[] doors; 

	public static final int NORTH = 0;
	public static final int EAST = 1;
	public static final int SOUTH = 2;
	public static final int WEST = 3;


	public CaveRoom(String description){
		this.description = description;
		setDefaultContents("   ");
		contents = defaultContents;
		
		borderingRooms = new CaveRoom[4];
		doors = new Door[4];
		for(int i = 0 ; i < borderingRooms.length; i++){
			borderingRooms[i] = null;
			doors[i] = null;
		}
		setDirections();
	}

	protected void setDirections() {
		directions	= "";
		if(doors[NORTH] == null && 
				doors[EAST] == null &&
				doors[SOUTH] == null &&
				doors[WEST] == null){
			directions = "\n\nThis is a room with no exit. You will die here.";		
		}else{
			for(int dir = 0; dir < doors.length; dir++){
				if(doors[dir] != null){
					directions += "\n   There is a "+doors[dir].getDescription()+" to "+toDirection(dir)+". "+doors[dir].getDetails();
				}
			}
		}
	
	}

	public String getContents(){
		return contents;
	}
	
	public void enter(){
		contents = " X ";
	}
	
	public void leave(){
		contents = defaultContents;
	}
	
	public void setDefaultContents(String symbol){
		defaultContents = symbol;
	}
	

	public void addRoom(int direction, CaveRoom anotherRoom, Door door){
		borderingRooms[direction] = anotherRoom;
		doors[direction] = door;
		setDirections();
	}
	
	/**
	 * Gives this room access to anotherRoom (and vice-versa) and
	 * sets a door between them, and updates the directions
	 * @param direction
	 * @param anotherRoom
	 * @param door
	 */
	public void setConnection(int direction, CaveRoom anotherRoom, Door door){
		addRoom(direction, anotherRoom, door);
		anotherRoom.addRoom(oppositeDirection(direction), this, door);
	}

	/**
	 * 
	 * @param dir
	 * @return opposite direction of dir (NORTH returns SOUTH...)
	 */
	public static int oppositeDirection(int dir){
		return (dir+2)%4;
	}

	
	public String getDescription(){
		return description+directions;
	}

	

	
	
	public Door getDoor(int dir){
		return doors[dir];
	}


	public void setDescription(String string) {
		description = string;
	}

	public void interpretInput(String input) {
		
		
	}

}
-----------------------
package caveExplorer;

import java.util.Arrays;

public class TwoDArrayIntro {
	public static void main(String [] args){
		int[] arr = {0,1,2,3,4,5,6,7};
		System.out.println(Arrays.toString(arr));
		
		//rows,columns
		String[][] arr2D = new String[4][3];	
		//iterate row by row:
		for(int row = 0; row < arr2D.length; row++){
			// in each row, go col by col
			for(int col = 0; col < arr2D[row].length; col++){
				arr2D[row][col]= "("+row+","+col+")"; 
				      }
		}
		//print each row
		for(String[] row: arr2D){
			System.out.println(Arrays.toString(row));
		}
	}
}

 --------------------------
